/*
 * $Id: CloseController.java /main/11 1998/08/07 10:22:21 jfitzpat $
 * $Source: /project/wamali/code/com/mot/wamali/guitools/CloseController.java $
 *
 * MOTOROLA CONFIDENTIAL PROPRIETARY
 *
 * Copyright 1998 Motorola Australia Pty. Ltd.
 * All Rights Reserved
 *
 * This is unpublished proprietary source code
 * of Motorola Australia Pty. Ltd.
 *
 * The copyright notice does not evidence any actual
 * or intended publication of such source code.
 */
package us.cownet.docfw.guitools;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * A CloseContoller closes a document's window.  The controller is
 * only interested in cases where the "close" is generated by the
 * user (ie. the close menu item or the close box of the window).
 * Closes that are generated programatically (ex. through the
 * removeDocument of the AppMain) are handled elsewhere.
 *
 * @author jfitzpat
 * @version $Revision: /main/11 $
 */
final class CloseController {
	// The application controlling the document
	private AppMain app;
	// The Document
	private Document doc;
	// The document's frame
	private Frame frame;

	/**
	 * Create a new close controller for a particular window and
	 * document.
	 */
	public CloseController(final Document doc, final Frame window,
			final JMenuItem item) {
		this.doc = doc;
		this.frame = window;

		//add a callback to the menu item
		item.addActionListener(
				new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						closeView();
					}
				}
		);

		//add a callback to the window's close box
		window.addWindowListener(
				new WindowAdapter() {
					public void windowClosing(WindowEvent e) {
						closeView();
					}
				}
		);

		//add a listener for when this view is
		//removed from the document
		doc.viewRemovedNotifier.addListener(
				new NotifierListener() {
					public void ping(Object view) {
						//if it was our view that was closed,
						//tell the controller.
						if (view == frame) {
							doc.viewRemovedNotifier.removeListener(this);
							handleViewClosed();
						}
					}
				}
		);
	}

	/**
	 * The view we are controlling was removed from the document.
	 * Remove its gui and close the document if needed.
	 * This is called when the document's removeView
	 * method is called.
	 */
	public void handleViewClosed() {
		frame.dispose();
		//if all views are closed, remove document from app
		if (doc.getViewCount() == 0) {
			doc.getApp().removeDocument(doc);
		}
	}

	/**
	 * Close the view.  Called by menu item and window close box.
	 */
	public void closeView() {
		doc.removeView(frame);
	}
}
